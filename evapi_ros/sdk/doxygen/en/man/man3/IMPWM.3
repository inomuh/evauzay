.TH "IMPWM" 3 "Thu Jul 9 2015" "evarobot library" \" -*- nroff -*-
.ad l
.nh
.SH NAME
IMPWM \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <IMPWM\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBIMPWM\fP ()"
.br
.RI "\fIConstructor\&. \fP"
.ti -1c
.RI "\fBIMPWM\fP (double d_Hz, unsigned int \fBu_i_counts\fP, double d_duty, int i_m)"
.br
.RI "\fIConstructor\&. \fP"
.ti -1c
.RI "\fB~IMPWM\fP ()"
.br
.ti -1c
.RI "unsigned int \fBSetFrequency\fP (const double &c_d_hz)"
.br
.RI "\fISets Frequency and reinitializes PWM peripheral\&. \fP"
.ti -1c
.RI "unsigned int \fBSetCounts\fP (const unsigned int &c_u_i_counts)"
.br
.RI "\fISets PWM resolution (counts) and reinitializes PWM peripheral\&. \fP"
.ti -1c
.RI "unsigned int \fBSetDutyCycle\fP (const double &c_d_duty, int i_pwm_no)"
.br
.RI "\fISets Duty Cycle as a Percentage (Fast) \fP"
.ti -1c
.RI "unsigned int \fBSetDutyCycleCount\fP (const unsigned int &c_u_i_counts, int i_pwm_no)"
.br
.RI "\fISets Duty Cycle as a count value (Fast) i\&.e\&. if counts is 1024 and 'duty' is set to 512, a 50% duty cycle is achieved\&. \fP"
.ti -1c
.RI "unsigned int \fBSetDutyCycleForce\fP (const double &c_d_duty, const int &c_i_m, int i_pwm_no)"
.br
.RI "\fIDisables PWM, sets duty cycle and enable PWM respectively\&. \fP"
.ti -1c
.RI "unsigned int \fBSetMode\fP (const int &c_i_m)"
.br
.RI "\fIsets PWM model with 'setDutyCycleForce()' \fP"
.ti -1c
.RI "double \fBGetFrequency\fP () const "
.br
.RI "\fIReturns current Frequency of PWM waveform\&. \fP"
.ti -1c
.RI "double \fBGetDutyCycle\fP () const "
.br
.RI "\fIReturns current DutyCycle (as a %) of PWM waveform\&. \fP"
.ti -1c
.RI "int \fBGetCounts\fP () const "
.br
.RI "\fIReturns PWM resolution\&. \fP"
.ti -1c
.RI "int \fBGetDivisor\fP () const "
.br
.RI "\fIReturns Divisor value used to set the period per count\&. \fP"
.ti -1c
.RI "int \fBGetMode\fP () const "
.br
.RI "\fIReturn PWMMODE (\fBIMPWM::MSMODE\fP or \fBIMPWM::PWMMODE\fP) \fP"
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static const int \fBPWMMODE\fP = 1"
.br
.ti -1c
.RI "static const int \fBMSMODE\fP = 2"
.br
.ti -1c
.RI "static const int \fBERRFREQ\fP = 1"
.br
.ti -1c
.RI "static const int \fBERRCOUNT\fP = 2"
.br
.ti -1c
.RI "static const int \fBERRDUTY\fP = 3"
.br
.ti -1c
.RI "static const int \fBERRMODE\fP = 4"
.br
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "volatile unsigned * \fBMapRegisterAddres\fP (unsigned long u_l_base_address)"
.br
.RI "\fIFunction to map physical memory\&. \fP"
.ti -1c
.RI "void \fBConfigPWMPin\fP ()"
.br
.RI "\fIThis function sets GPIO18 to the alternat function 5 (ALT5) and GPIO13 to ALT0 to enable the pin to output the PWM waveforms generated by PWM1 and PWM2\&. \fP"
.ti -1c
.RI "void \fBConfigPWM\fP ()"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "double \fBd_frequency\fP"
.br
.ti -1c
.RI "double \fBd_dutyCycle\fP"
.br
.ti -1c
.RI "unsigned int \fBu_i_counts\fP"
.br
.ti -1c
.RI "unsigned int \fBu_i_divisor\fP"
.br
.ti -1c
.RI "int \fBi_mode\fP"
.br
.ti -1c
.RI "volatile unsigned * \fBp_v_u_clk\fP"
.br
.ti -1c
.RI "volatile unsigned * \fBp_v_u_pwm\fP"
.br
.ti -1c
.RI "volatile unsigned * \fBp_v_u_gpio\fP"
.br
.in -1c
.SS "Static Private Attributes"

.in +1c
.ti -1c
.RI "static const int \fBBCM2708_PERI_BASE\fP = 0x3F000000"
.br
.ti -1c
.RI "static const int \fBPWM_BASE\fP = (\fBBCM2708_PERI_BASE\fP + 0x20C000)"
.br
.ti -1c
.RI "static const int \fBCLOCK_BASE\fP = (\fBBCM2708_PERI_BASE\fP + 0x101000)"
.br
.ti -1c
.RI "static const int \fBGPIO_BASE\fP = (\fBBCM2708_PERI_BASE\fP + 0x200000)"
.br
.ti -1c
.RI "static const int \fBPWM_CTL\fP = 0"
.br
.ti -1c
.RI "static const int \fBPWM_RNG1\fP = 4"
.br
.ti -1c
.RI "static const int \fBPWM_DAT1\fP = 5"
.br
.ti -1c
.RI "static const int \fBPWM_RNG2\fP = 8"
.br
.ti -1c
.RI "static const int \fBPWM_DAT2\fP = 9"
.br
.ti -1c
.RI "static const int \fBPWMCLK_CNTL\fP = 40"
.br
.ti -1c
.RI "static const int \fBPWMCLK_DIV\fP = 41"
.br
.ti -1c
.RI "static const int \fBBLOCK_SIZE\fP = 4096"
.br
.in -1c
.SH "Detailed Description"
.PP 
Definition at line 38 of file IMPWM\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "IMPWM::IMPWM ()"

.PP
Constructor\&. 
.PP
Definition at line 47 of file IMPWM\&.cpp\&.
.PP
References CLOCK_BASE, ConfigPWM(), ConfigPWMPin(), d_dutyCycle, d_frequency, GPIO_BASE, i_mode, MapRegisterAddres(), p_v_u_clk, p_v_u_gpio, p_v_u_pwm, PWM_BASE, PWMMODE, and u_i_counts\&.
.SS "IMPWM::IMPWM (doubled_Hz, unsigned intu_i_counts, doubled_duty, inti_m)"

.PP
Constructor\&. 
.PP
\fBParameters:\fP
.RS 4
\fId_Hz\fP Frequency 
.br
\fIu_i_counts\fP PWM resolution 
.br
\fId_duty\fP duty cycle 
.br
\fIi_m\fP \fBIMPWM::MSMODE\fP or \fBIMPWM::PWMMODE\fP 
.RE
.PP

.PP
Definition at line 79 of file IMPWM\&.cpp\&.
.PP
References CLOCK_BASE, ConfigPWM(), ConfigPWMPin(), d_dutyCycle, d_frequency, GPIO_BASE, i_mode, MapRegisterAddres(), MSMODE, p_v_u_clk, p_v_u_gpio, p_v_u_pwm, PWM_BASE, PWMMODE, SetDutyCycleCount(), and u_i_counts\&.
.SS "IMPWM::~IMPWM ()"

.PP
Definition at line 123 of file IMPWM\&.cpp\&.
.PP
References BLOCK_SIZE, p_v_u_clk, p_v_u_gpio, p_v_u_pwm, PWM_CTL, PWM_DAT1, PWM_RNG1, PWMCLK_CNTL, and PWMCLK_DIV\&.
.SH "Member Function Documentation"
.PP 
.SS "void IMPWM::ConfigPWM ()\fC [private]\fP"
This function is responsible for the global configuration and initialization of the the PWM1 and PWM2 peripheral 
.PP
Definition at line 487 of file IMPWM\&.cpp\&.
.PP
References d_dutyCycle, d_frequency, i_mode, p_v_u_clk, p_v_u_pwm, PWM_CTL, PWM_DAT1, PWM_DAT2, PWM_RNG1, PWM_RNG2, PWMCLK_CNTL, PWMCLK_DIV, PWMMODE, u_i_counts, and u_i_divisor\&.
.PP
Referenced by IMPWM(), SetCounts(), and SetFrequency()\&.
.SS "void IMPWM::ConfigPWMPin ()\fC [private]\fP"

.PP
This function sets GPIO18 to the alternat function 5 (ALT5) and GPIO13 to ALT0 to enable the pin to output the PWM waveforms generated by PWM1 and PWM2\&. 
.PP
\fBReturns:\fP
.RS 4

.RE
.PP

.PP
Definition at line 440 of file IMPWM\&.cpp\&.
.PP
References p_v_u_gpio\&.
.PP
Referenced by IMPWM()\&.
.SS "int IMPWM::GetCounts () const"

.PP
Returns PWM resolution\&. 
.PP
Definition at line 373 of file IMPWM\&.cpp\&.
.PP
References u_i_counts\&.
.SS "int IMPWM::GetDivisor () const"

.PP
Returns Divisor value used to set the period per count\&. 
.PP
\fBReturns:\fP
.RS 4

.RE
.PP

.PP
Definition at line 375 of file IMPWM\&.cpp\&.
.PP
References u_i_divisor\&.
.SS "double IMPWM::GetDutyCycle () const"

.PP
Returns current DutyCycle (as a %) of PWM waveform\&. 
.PP
Definition at line 377 of file IMPWM\&.cpp\&.
.PP
References d_dutyCycle\&.
.SS "double IMPWM::GetFrequency () const"

.PP
Returns current Frequency of PWM waveform\&. 
.PP
Definition at line 371 of file IMPWM\&.cpp\&.
.PP
References d_frequency\&.
.SS "int IMPWM::GetMode () const"

.PP
Return PWMMODE (\fBIMPWM::MSMODE\fP or \fBIMPWM::PWMMODE\fP) 
.PP
\fBReturns:\fP
.RS 4

.RE
.PP

.PP
Definition at line 379 of file IMPWM\&.cpp\&.
.PP
References i_mode\&.
.SS "volatile unsigned * IMPWM::MapRegisterAddres (unsigned longu_l_base_address)\fC [private]\fP"

.PP
Function to map physical memory\&. 
.PP
\fBParameters:\fP
.RS 4
\fIu_l_base_address\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
.RE
.PP

.PP
Definition at line 392 of file IMPWM\&.cpp\&.
.PP
References BLOCK_SIZE\&.
.PP
Referenced by IMPWM()\&.
.SS "unsigned int IMPWM::SetCounts (const unsigned int &c_u_i_counts)"

.PP
Sets PWM resolution (counts) and reinitializes PWM peripheral\&. 
.PP
\fBParameters:\fP
.RS 4
\fI&\fP c_u_i_counts PWM resolution 
.RE
.PP
\fBReturns:\fP
.RS 4
.RE
.PP

.PP
Definition at line 204 of file IMPWM\&.cpp\&.
.PP
References ConfigPWM(), ERRCOUNT, and u_i_counts\&.
.SS "unsigned int IMPWM::SetDutyCycle (const double &c_d_duty, inti_pwm_no)"

.PP
Sets Duty Cycle as a Percentage (Fast) 
.PP
\fBParameters:\fP
.RS 4
\fI&c_d_duty\fP Duty cycle 
.br
\fIi_pwm_no\fP 0: PWM1 1:PWM2 
.RE
.PP
\fBReturns:\fP
.RS 4
.RE
.PP

.PP
Definition at line 229 of file IMPWM\&.cpp\&.
.PP
References d_dutyCycle, ERRDUTY, p_v_u_pwm, PWM_DAT1, PWM_DAT2, and u_i_counts\&.
.SS "unsigned int IMPWM::SetDutyCycleCount (const unsigned int &c_u_i_counts, inti_pwm_no)"

.PP
Sets Duty Cycle as a count value (Fast) i\&.e\&. if counts is 1024 and 'duty' is set to 512, a 50% duty cycle is achieved\&. 
.PP
\fBParameters:\fP
.RS 4
\fI&c_u_i_counts\fP 
.br
\fIi_pwm_no\fP 0: PWM1 1:PWM2 
.RE
.PP
\fBReturns:\fP
.RS 4
.RE
.PP

.PP
Definition at line 320 of file IMPWM\&.cpp\&.
.PP
References d_dutyCycle, ERRDUTY, p_v_u_pwm, PWM_DAT1, PWM_DAT2, and u_i_counts\&.
.PP
Referenced by IMPWM()\&.
.SS "unsigned int IMPWM::SetDutyCycleForce (const double &c_d_duty, const int &c_i_m, inti_pwm_no)"

.PP
Disables PWM, sets duty cycle and enable PWM respectively\&. 
.PP
\fBParameters:\fP
.RS 4
\fI&c_d_duty\fP Duty cycle 
.br
\fI&c_i_m\fP \fBIMPWM::MSMODE\fP or \fBIMPWM::PWMMODE\fP 
.br
\fIi_pwm_no\fP 0: PWM1 1:PWM2 
.RE
.PP
\fBReturns:\fP
.RS 4
.RE
.PP

.PP
Definition at line 262 of file IMPWM\&.cpp\&.
.PP
References d_dutyCycle, ERRDUTY, ERRMODE, i_mode, MSMODE, p_v_u_pwm, PWM_CTL, PWM_DAT1, PWM_DAT2, PWM_RNG1, PWM_RNG2, PWMMODE, and u_i_counts\&.
.PP
Referenced by SetMode()\&.
.SS "unsigned int IMPWM::SetFrequency (const double &c_d_hz)"

.PP
Sets Frequency and reinitializes PWM peripheral\&. 
.PP
\fBParameters:\fP
.RS 4
\fI&\fP c_d_hz Frequency 
.RE
.PP
\fBReturns:\fP
.RS 4
.RE
.PP

.PP
Definition at line 179 of file IMPWM\&.cpp\&.
.PP
References ConfigPWM(), d_frequency, and ERRFREQ\&.
.SS "unsigned int IMPWM::SetMode (const int &c_i_m)"

.PP
sets PWM model with 'setDutyCycleForce()' 
.PP
\fBParameters:\fP
.RS 4
\fI&c_i_m\fP \fBIMPWM::MSMODE\fP ya da \fBIMPWM::PWMMODE\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
.RE
.PP

.PP
Definition at line 347 of file IMPWM\&.cpp\&.
.PP
References d_dutyCycle, ERRMODE, i_mode, MSMODE, PWMMODE, and SetDutyCycleForce()\&.
.SH "Member Data Documentation"
.PP 
.SS "const int IMPWM::BCM2708_PERI_BASE = 0x3F000000\fC [static]\fP, \fC [private]\fP"

.PP
Definition at line 274 of file IMPWM\&.h\&.
.SS "const int IMPWM::BLOCK_SIZE = 4096\fC [static]\fP, \fC [private]\fP"

.PP
Definition at line 288 of file IMPWM\&.h\&.
.PP
Referenced by MapRegisterAddres(), and ~IMPWM()\&.
.SS "const int IMPWM::CLOCK_BASE = (\fBBCM2708_PERI_BASE\fP + 0x101000)\fC [static]\fP, \fC [private]\fP"

.PP
Definition at line 276 of file IMPWM\&.h\&.
.PP
Referenced by IMPWM()\&.
.SS "double IMPWM::d_dutyCycle\fC [private]\fP"

.PP
Definition at line 341 of file IMPWM\&.h\&.
.PP
Referenced by ConfigPWM(), GetDutyCycle(), IMPWM(), SetDutyCycle(), SetDutyCycleCount(), SetDutyCycleForce(), and SetMode()\&.
.SS "double IMPWM::d_frequency\fC [private]\fP"

.PP
Definition at line 340 of file IMPWM\&.h\&.
.PP
Referenced by ConfigPWM(), GetFrequency(), IMPWM(), and SetFrequency()\&.
.SS "const int IMPWM::ERRCOUNT = 2\fC [static]\fP"

.PP
Definition at line 265 of file IMPWM\&.h\&.
.PP
Referenced by SetCounts()\&.
.SS "const int IMPWM::ERRDUTY = 3\fC [static]\fP"

.PP
Definition at line 266 of file IMPWM\&.h\&.
.PP
Referenced by SetDutyCycle(), SetDutyCycleCount(), and SetDutyCycleForce()\&.
.SS "const int IMPWM::ERRFREQ = 1\fC [static]\fP"

.PP
Definition at line 264 of file IMPWM\&.h\&.
.PP
Referenced by SetFrequency()\&.
.SS "const int IMPWM::ERRMODE = 4\fC [static]\fP"

.PP
Definition at line 267 of file IMPWM\&.h\&.
.PP
Referenced by SetDutyCycleForce(), and SetMode()\&.
.SS "const int IMPWM::GPIO_BASE = (\fBBCM2708_PERI_BASE\fP + 0x200000)\fC [static]\fP, \fC [private]\fP"

.PP
Definition at line 277 of file IMPWM\&.h\&.
.PP
Referenced by IMPWM()\&.
.SS "int IMPWM::i_mode\fC [private]\fP"

.PP
Definition at line 344 of file IMPWM\&.h\&.
.PP
Referenced by ConfigPWM(), GetMode(), IMPWM(), SetDutyCycleForce(), and SetMode()\&.
.SS "const int IMPWM::MSMODE = 2\fC [static]\fP"

.PP
Definition at line 261 of file IMPWM\&.h\&.
.PP
Referenced by IMPWM(), SetDutyCycleForce(), and SetMode()\&.
.SS "volatile unsigned* IMPWM::p_v_u_clk\fC [private]\fP"

.PP
Definition at line 345 of file IMPWM\&.h\&.
.PP
Referenced by ConfigPWM(), IMPWM(), and ~IMPWM()\&.
.SS "volatile unsigned * IMPWM::p_v_u_gpio\fC [private]\fP"

.PP
Definition at line 345 of file IMPWM\&.h\&.
.PP
Referenced by ConfigPWMPin(), IMPWM(), and ~IMPWM()\&.
.SS "volatile unsigned * IMPWM::p_v_u_pwm\fC [private]\fP"

.PP
Definition at line 345 of file IMPWM\&.h\&.
.PP
Referenced by ConfigPWM(), IMPWM(), SetDutyCycle(), SetDutyCycleCount(), SetDutyCycleForce(), and ~IMPWM()\&.
.SS "const int IMPWM::PWM_BASE = (\fBBCM2708_PERI_BASE\fP + 0x20C000)\fC [static]\fP, \fC [private]\fP"

.PP
Definition at line 275 of file IMPWM\&.h\&.
.PP
Referenced by IMPWM()\&.
.SS "const int IMPWM::PWM_CTL = 0\fC [static]\fP, \fC [private]\fP"

.PP
Definition at line 279 of file IMPWM\&.h\&.
.PP
Referenced by ConfigPWM(), SetDutyCycleForce(), and ~IMPWM()\&.
.SS "const int IMPWM::PWM_DAT1 = 5\fC [static]\fP, \fC [private]\fP"

.PP
Definition at line 281 of file IMPWM\&.h\&.
.PP
Referenced by ConfigPWM(), SetDutyCycle(), SetDutyCycleCount(), SetDutyCycleForce(), and ~IMPWM()\&.
.SS "const int IMPWM::PWM_DAT2 = 9\fC [static]\fP, \fC [private]\fP"

.PP
Definition at line 283 of file IMPWM\&.h\&.
.PP
Referenced by ConfigPWM(), SetDutyCycle(), SetDutyCycleCount(), and SetDutyCycleForce()\&.
.SS "const int IMPWM::PWM_RNG1 = 4\fC [static]\fP, \fC [private]\fP"

.PP
Definition at line 280 of file IMPWM\&.h\&.
.PP
Referenced by ConfigPWM(), SetDutyCycleForce(), and ~IMPWM()\&.
.SS "const int IMPWM::PWM_RNG2 = 8\fC [static]\fP, \fC [private]\fP"

.PP
Definition at line 282 of file IMPWM\&.h\&.
.PP
Referenced by ConfigPWM(), and SetDutyCycleForce()\&.
.SS "const int IMPWM::PWMCLK_CNTL = 40\fC [static]\fP, \fC [private]\fP"

.PP
Definition at line 284 of file IMPWM\&.h\&.
.PP
Referenced by ConfigPWM(), and ~IMPWM()\&.
.SS "const int IMPWM::PWMCLK_DIV = 41\fC [static]\fP, \fC [private]\fP"

.PP
Definition at line 285 of file IMPWM\&.h\&.
.PP
Referenced by ConfigPWM(), and ~IMPWM()\&.
.SS "const int IMPWM::PWMMODE = 1\fC [static]\fP"

.PP
Definition at line 260 of file IMPWM\&.h\&.
.PP
Referenced by ConfigPWM(), IMPWM(), SetDutyCycleForce(), and SetMode()\&.
.SS "unsigned int IMPWM::u_i_counts\fC [private]\fP"

.PP
Definition at line 342 of file IMPWM\&.h\&.
.PP
Referenced by ConfigPWM(), GetCounts(), IMPWM(), SetCounts(), SetDutyCycle(), SetDutyCycleCount(), and SetDutyCycleForce()\&.
.SS "unsigned int IMPWM::u_i_divisor\fC [private]\fP"

.PP
Definition at line 343 of file IMPWM\&.h\&.
.PP
Referenced by ConfigPWM(), and GetDivisor()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for evarobot library from the source code\&.
